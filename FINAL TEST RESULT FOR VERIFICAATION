var EscrowComplianceCecker = artifacts.require("EscrowComplianceCecker");
const assert = require("chai").assert;
 truffleAssert = require('truffle-assertions');

contract('EscrowComplianceCecker', (accounts) => { 
  var EscrowInstance;
/*
  it("it displays the balance of the escrow", async () =>{
    return EscrowComplianceCecker.deployed().then(function(instance) {
      return instance.balances();
    })
  });
*/
/*  
it("it initializes the candidates with the correct values", function() {
    return EscrowComplianceCecker.deployed().then(function(instance) {
      EscrowInstance = instance;
      let eventsendmyescrow = instance.pleasesendmyescrow();
      let amount =10;
     // let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
      let amountsatisfied = web3.utils.toBN(amount);
       
     
     
     truffleAssert.reverts(
      
      instance.sendescrow(accounts[0], web3.utils.fromAscii("peeman"),amountsatisfied)).then(function(result){
        instance.pleasesendmyescrow({
          filter: {},
          fromBlock: 0,
          toBlock: 'latest'
          }, function(error, event){ console.log(event); })
     let filter =     instance.pleasesendmyescrow({
            filter: {},
            fromBlock: 0,
            toBlock: 'latest'
            }, function(error, result){ console.log(result); })


    });
 
     

  let eventss =   instance.allEvents({
      filter: {},
      fromBlock: 0,
      toBlock: 'latest'
      }, function(error, event){ console.log(event); })
     
     
     
  
  
    });
   


 
  });
*/
  it("it initializes the candidates with the correct values", function() {
    return EscrowComplianceCecker.deployed().then(function(instance) {
      EscrowInstance = instance;
    //  let eventsendmyescrow = instance.pleasesendmyescrow();


   


  //  let  mysignature = web3.eth.accounts.sign("Hello world", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", "test password!");
//  console.log(mysignature);

  //   let amount =10;
  //   let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
 //   let amountsatisfied = web3.utils.toBN(amountrequiredo);
       
 //     let amounthere =12;
 //      let amountrequiredos = web3.utils.toWei(amounthere.toString(),'ether');
 //    let amountsatisfiedhere = web3.utils.toBN(amountrequiredos);
        
     
       let amount = 10
    //   let process = web3.utils.toBN(amount);
      
       let amounthere = 12
     //  let processagain = web3.utils.toBN(amounthere);
     
       let signer = '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe';
     
       let receipient = '0x91796AA285Cc5770fEd2f1B496b411f5BE3ED9D4';
       let contractAddress = ' 0x20911A320FD1e2B96141f403fEa309518C77FB3A';
     
              
    // let hash =  web3.utils.soliditySha3(receipient, amount, amounthere, contractAddress);
    
         
     
    //   console.log(hash);
     
 //      let mysignature = web3.eth.accounts.sign(hash, signer, "test password!");
 // console.log(mysignature);

      
       
    truffleAssert.reverts(
      
      instance.claimPayment( signer, amount, amounthere ,  '0x593ef03578833a3c4147764f93af7ddfbea0ed1f903945d5fd73a8478a09095a2ba924439633fd7ee0b4c291587075c64f93ecf78016923742b80a1913ad38e41c', '0xa00ecedc777b63843ab243de8ab856c27102c0f4ed7594a33d3fe9079005ee9d')).then(function(result){
        console.log(result);
   });
 
     

  
     
     
  
  
    });
   


 
  });



  /*

  it("it helps to return back the escrow", function() {
    return EscrowComplianceCecker.deployed().then(function(instance) {
      EscrowInstance = instance;
      let eventsendmyescrow = instance.pleasesendmyescrow();
      let amount =19;
      let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
      let amountsatisfied = web3.utils.toBN(amountrequiredo);
       truffleAssert.reverts(
      
      instance.returnbackescrow(accounts[0], web3.utils.fromAscii("peeman"),amountsatisfied)).then(function(result){
        instance.pleasesendmyescrow({
          filter: {},
          fromBlock: 0,
          toBlock: 'latest'
          }, function(error, event){ console.log(event); })
     let filter =     instance.pleasesendmyescrow({
            filter: {},
            fromBlock: 0,
            toBlock: 'latest'
            }, function(error, result){ console.log(result); })


    });
 
     

  let eventss =   instance.allEvents({
      filter: {},
      fromBlock: 0,
      toBlock: 'latest'
      }, function(error, event){ console.log(event); })
     
     
     
  
  
    });
   


 
  });

*/
/*
  it("it checks to see amount sent", function() {

    return EscrowComplianceCecker.deployed().then(function(instance) {
     let event = instance.pleasesendmyescrow();
      EscrowInstance = instance;
      let amount =19;
      let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
      let amountsatisfied = web3.utils.toBN(amountrequiredo);
       
       
  
 
      
      truffleAssert.reverts(
      
       instance.Sent({from: accounts[0],to: instance.escrowownaddress(),value: amountsatisfied})).then(function(result){
          return amount;
       
        });
  
    
    });
 
    });


*/
 
 
  /* it("allows a voter to cast a vote", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      candidateId = 1;
      return electionInstance.vote(candidateId, { from: accounts[0] });
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, "an event was triggered");
      assert.equal(receipt.logs[0].event, "votedEvent", "the event type is correct");
      assert.equal(receipt.logs[0].args._candidateId.toNumber(), candidateId, "the candidate id is correct");
      return electionInstance.voters(accounts[0]);
    }).then(function(voted) {
      assert(voted, "the voter was marked as voted");
      return electionInstance.candidates(candidateId);
    }).then(function(candidate) {
      var voteCount = candidate[2];
      assert.equal(voteCount, 1, "increments the candidate's vote count");
    })
  });

  it("throws an exception for invalid candiates", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      return electionInstance.vote(99, { from: accounts[1] })
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, "error message must contain revert");
      return electionInstance.candidates(1);
    }).then(function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, "candidate 1 did not receive any votes");
      return electionInstance.candidates(2);
    }).then(function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 0, "candidate 2 did not receive any votes");
    });
  });

  it("throws an exception for double voting", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      candidateId = 2;
      electionInstance.vote(candidateId, { from: accounts[1] });
      return electionInstance.candidates(candidateId);
    }).then(function(candidate) {
      var voteCount = candidate[2];
      assert.equal(voteCount, 1, "accepts first vote");
      // Try to vote again
      return electionInstance.vote(candidateId, { from: accounts[1] });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, "error message must contain revert");
      return electionInstance.candidates(1);
    }).then(function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, "candidate 1 did not receive any votes");
      return electionInstance.candidates(2);
    }).then(function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 1, "candidate 2 did not receive any votes");
    });
  });

*/






});

