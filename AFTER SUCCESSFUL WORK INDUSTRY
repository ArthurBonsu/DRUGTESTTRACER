pragma solidity >=0.4.0 <0.6.0;
 import "./EscrowComplianceCecker.sol";

contract Industry is EscrowComplianceCecker {
// `TokenCreator` is a contract type that is defined below.
// It is fine to reference it as long as it is not used
// to create a new contract.
 
uint public i =0;
uint public strucount=0;
//This is the Processing Entitiy , whether farmer, manufacturer or sales
  constructor() public payable {
  
}
    
struct ProcessingEntity{
    address payable currentowner;
    address payable receiver;
    uint256 publickey;
    bytes32 currentownername;
    bytes32 receivername;
     uint256 currentownerprocessingfee;
     bytes32 role;
     uint balance;
      bytes32 RFIDofdrugtobesent;
    uint currentownerscount;
   mapping (bytes32 => ProcessingEntity[1000]) processingentities;  
}
        struct ProcessingEntityStructure{
      bytes32 location;
     bool hasdrug;
     
     uint escrowamount;
     address payable lastdestination;
     address payable justhandedoveraddres;
     bytes32 RFIDofthisdrug;
     address payable manufacturerofdrugstobesent;
    

     uint currentpersoncount;
    mapping (bytes32 => ProcessingEntityStructure[1000]) ProcessingEntityStructures;
}

 //This is the drug

struct Drug{
    address payable manufacturer;
    address payable currentdrugpossessor;
      bytes32 RFID;
    
      bytes32 drugname;
      uint cost;
     int temperature;
     int concentration;
     bytes32 location;
     bytes32 drugquality;
   
  mapping (bytes32 => Drug[1000]) drugs;
    uint numOfDrugCount;
    
}

// This is the nuber of phases that has taken place 
// We are tokenizing the process

struct Processes{
      address currentproces;
      bytes32 timestamp;
      bytes32 drugname;
      uint numberofProcessingEntities;
      
     
      bytes32 location;
      address payable receipient;
      uint escrowvalue;
   
   mapping (address => ProcessingEntity) Processingentities;
     uint256 numOfProcesses;
   mapping (uint => Processes) processbatch;
   mapping (bytes32 => Drug[1000]) drugRFID;

      }
      
ProcessingEntityStructure public processingstructures;
ProcessingEntityStructure[] public processingstructureses;

Processes procedure;
Processes[] public procedures;

ProcessingEntity public procent;

ProcessingEntity[] public  procenter;


Drug[] public self;
 Drug me;

  
function providecustomerpermission( bytes32 _RFID) public {
        bool givepermito;
        
       procent.currentownerscount;
  
       i =procent.currentownerscount;
   
       processingstructures.currentpersoncount;
      strucount =processingstructures.currentpersoncount;
   
        procent.processingentities[procent.RFIDofdrugtobesent][i].role;
         givepermito = false;
         
       givepermitte(givepermito);
    
         require (  givepermitte(givepermito) == true);return;   
         require(procent.processingentities[procent.RFIDofdrugtobesent][i].role== 'manufacturer', "Permission not given by manufacturer");return;

        PrintthemAll(_RFID); 
}
  function givepermitte ( bool givepermits) public pure returns (bool)  {
                givepermits = true;
             return givepermits;
 }
 
  function makeDeposit(address payable donationmaker, uint amount) public payable  {
      address payable cashtoescrow=0xdE27Eaf0FBE58cAF3B932dF0f414584bf2D15000;
           uint amounts =0;
           amount =0; 
            amounts =amount;
            procent.currentownerscount=0;
            i=procent.currentownerscount;
             processingstructures.currentpersoncount=0;
     strucount =processingstructures.currentpersoncount;
   procent.processingentities[procent.RFIDofdrugtobesent][i].balance=0;
            procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner=donationmaker;
             uint donationbalance =0;
               donationbalance = donationmaker.balance; 
          //   require(amount <= procent.processingentities[procent.RFIDofdrugtobesent][i].balance,  "Insufficient balance.");
             require(amount <= donationbalance,  "Insufficient balance.");
             EscrowComplianceCecker.deposit( procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner, cashtoescrow, amount);
            
            donationmaker.transfer(amount);

         emit Sent(donationmaker, cashtoescrow, amount);
             procent.processingentities[procent.RFIDofdrugtobesent][i].balance-=amount;
                 
      }
 function PrintthemAll( bytes32 myRFID) public{
      PrintProcessingEntity(myRFID);
     //  PrintProcessingEntityDetails(myRFID);
     //  PrintProcessingEntityStatus(myRFID);
        PrintDrugInfo(myRFID);
    //    PrintDrugInfoAdditional(myRFID);
   
     
 }

 function DetectGoodsQuality(bytes32 _RFID) public {
  uint w=0;
     procent.currentownerscount=0;
    me.numOfDrugCount=0;
  processingstructures.currentpersoncount=0;
    me.drugs;
    
    // me.numOfDrugCount;
   i =procent.currentownerscount;
   me.RFID;
    
     strucount =processingstructures.currentpersoncount;
     me.drugs[me.RFID][w];
      me.drugs[me.RFID][w].RFID;
     me.drugs[me.RFID][w].temperature;
    me.drugs[me.RFID][w].concentration;
  // self[w].concentration;
                             me.drugs[_RFID][w].RFID =_RFID;
                    require ( me.drugs[_RFID][w].RFID  ==  _RFID,"RFID Not Found");return;



                   if( me.drugs[_RFID][w].temperature <=  (me.drugs[_RFID][1].temperature)/3 &&  me.drugs[_RFID][w].concentration <=  (me.drugs[_RFID][1].concentration )/3){
                       
                       me.drugs[_RFID][w].drugquality = "Moderately Low";
                        
                   }    
                   else if ( me.drugs[_RFID][w].temperature <=  (me.drugs[_RFID][1].temperature)/4 &&  me.drugs[_RFID][w].concentration <=  (me.drugs[_RFID][1].concentration )/4){
                       me.drugs[me.RFID][w].drugquality = "Below Standard";
                   }
                   else {
                       me.drugs[me.RFID][w].drugquality= " Standard";
                   }
     w++;
 }
   function hasbeenenrolled (address payable enroller,bool hasenrolled) public
   {  
             hasenrolled = false;
           procent.currentownerscount=0;
           i =procent.currentownerscount;
            processingstructures.currentpersoncount=0;
     strucount =processingstructures.currentpersoncount;
    
   
            procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= enroller;

            hasenrolled = true;
   }
   
 
function PrintProcessingEntity(bytes32 _RFID) public returns(address payable a, address payable b, uint256 c,bytes32 d,
  bytes32 e,uint256 f){
    me.RFID =_RFID;
    procent.RFIDofdrugtobesent=_RFID;
     uint w = me.numOfDrugCount;
     i =procent.currentownerscount;
      processingstructures.currentpersoncount;
     strucount =processingstructures.currentpersoncount;
    
   
    
   procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner=a;
       procent.processingentities[procent.RFIDofdrugtobesent][i].receiver=b;
        procent.processingentities[procent.RFIDofdrugtobesent][i].publickey=c;
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername =d;
      procent.processingentities[procent.RFIDofdrugtobesent][i].receivername =e;
         me.drugs[me.RFID][w].RFID;
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerprocessingfee=f;
      
     procent.processingentities[procent.RFIDofdrugtobesent][i].RFIDofdrugtobesent;
               procent.processingentities[_RFID][i].RFIDofdrugtobesent = _RFID;
                      me.drugs[_RFID][w].RFID =_RFID;
                      require(procent.processingentities[_RFID][i].RFIDofdrugtobesent==_RFID); 
                       require(me.drugs[_RFID][w].RFID==_RFID);
         //       procent.processingentities[procent.RFIDofdrugtobesent][i];
       
      return (a,b,c,d,e,f );
      
  }
  
 
  function PrintDrugInfo(bytes32 _RFID) public returns(address payable q,
    bytes32 r, uint s,bytes32 t){
    uint w=0; 
    me.RFID;
    procent.RFIDofdrugtobesent;
    me.numOfDrugCount=0;
    procent.currentownerscount=0;
    processingstructures.currentpersoncount=0;
     
     w= me.numOfDrugCount;
     i =procent.currentownerscount;
     
     processingstructures.currentpersoncount;
     strucount =processingstructures.currentpersoncount;
    
   
  
     
       me.drugs[me.RFID][w].currentdrugpossessor=q;
      me.drugs[me.RFID][w].RFID=r;
       me.drugs[me.RFID][w].cost=s;
       me.drugs[me.RFID][w].drugname=t;
         procent.processingentities[procent.RFIDofdrugtobesent][i].RFIDofdrugtobesent;
          me.drugs[me.RFID][w].RFID;
    
          procent.processingentities[_RFID][i].RFIDofdrugtobesent =_RFID;
          me.drugs[_RFID][w].RFID =_RFID;
                      require(procent.processingentities[_RFID][i].RFIDofdrugtobesent==_RFID); 
    
                       require(me.drugs[_RFID][w].RFID==_RFID);
         //       procent.processingentities[procent.RFIDofdrugtobesent][i];
       
      return (q,r,s,t );
      
  
  }
    
  // I have processing entities here
   
  //The industry person has to oblidge to an escrow by making a small deposit
 function createEscrow(uint escrowvalue, uint balancers) public {
  procent.currentownerscount=0;
  processingstructures.currentpersoncount=0;
  
  i =procent.currentownerscount;
   
     strucount =processingstructures.currentpersoncount;
    procent.processingentities[procent.RFIDofdrugtobesent][i].balance =0;
    processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
  

    procent.processingentities[procent.RFIDofdrugtobesent][i].balance=balancers;
     processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount = escrowvalue;
       processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= procent.processingentities[procent.RFIDofdrugtobesent][i].balance/4;
      procent.processingentities[procent.RFIDofdrugtobesent][i].balance-= processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount;
 
 }
 
  function sendescrows(address payable escrowparticipator, bytes32 escrowparticipatorname, uint escrowparticipatoramount, uint v) public payable {
 
 
   procent.currentownerscount =0;
   processingstructures.currentpersoncount=0;
   
       i =procent.currentownerscount;
       
     strucount =processingstructures.currentpersoncount;
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount=0;
      procent.processingentities[procent.RFIDofdrugtobesent][i].balance=0;
      
 
       procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount=v;
    
    processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
    procent.processingentities[procent.RFIDofdrugtobesent][i].balance =0;
 
       procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= escrowparticipator;
     procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername=escrowparticipatorname;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount =escrowparticipatoramount;
        createEscrow( processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount,procent.processingentities[procent.RFIDofdrugtobesent][i].balance);  
        EscrowComplianceCecker.sendescrow( procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername,processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount);
      
      
  }
  
  function  sendescrow(address payable escrowparticipator, bytes32 escrowparticipatorname, uint escrowparticipatoramount) public payable {
           procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
           i =procent.currentownerscount=0;
           strucount =processingstructures.currentpersoncount;
           
            procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= escrowparticipator;
     procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername=escrowparticipatorname;
    
     processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= escrowparticipatoramount;
       
          EscrowComplianceCecker.sendescrow(procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,  procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername, processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount);
      }
      
      
      
      function returnbackescrow (address payable _escrowvictimaddress, bytes32 _escrowvictimmame, uint _escrowvictimmoney) public payable{
            
              procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
           i =procent.currentownerscount=0;
           strucount =processingstructures.currentpersoncount;
           
           
               procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= _escrowvictimaddress;
     procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername=_escrowvictimmame;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= _escrowvictimmoney;
    
           
             EscrowComplianceCecker.returnbackescrow(  procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,  procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername, processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount);
      }
      
      function deposit(address payable donator, address payable receipient, uint amount) public payable {
          
          
          procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
           i =procent.currentownerscount=0;
           strucount =processingstructures.currentpersoncount;
            procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= donator;
           procent.processingentities[procent.RFIDofdrugtobesent][i].receiver=  receipient;
           
         processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= amount;
    
           
        
            EscrowComplianceCecker.deposit(procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,   procent.processingentities[procent.RFIDofdrugtobesent][i].receiver,  processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount);   
      }
      
      
      
      
  
 // This is where we check the last destination to see if the drug has arrived mostly at point of purchase
 //In some cases different shops may buy assigning the last destination may be a bit tricky on that note
 function checklastdestination(address payable _receiver,address payable  _lastdestination,uint256 s) public {
         procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
          bool _lastdestinationreached = false;
       i =procent.currentownerscount;
       
     strucount =processingstructures.currentpersoncount;
    
   procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount=0;
    procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount=s;
       procent.processingentities[procent.RFIDofdrugtobesent][i].receiver=_receiver;
       processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].lastdestination =_lastdestination;
         if(procent.processingentities[procent.RFIDofdrugtobesent][i].receiver ==processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].lastdestination){
              _lastdestinationreached = true;
             
         }
 }
 
 // We ensure that they verify so that we can show their details else escrow is launched;
/* function checksignature() public {
     
     
 }
 */

   //For each phase end it makes an incrament for another drug possibly

  function endphases(uint numOfDrugCounts, address payable _lastdestination)  public  returns(uint){
      //I have to add i
  uint numOfDrugCount=0;
   me.numOfDrugCount=0;
   processingstructures.currentpersoncount=0;
  
    me.drugs;
         
     strucount =processingstructures.currentpersoncount;
    
 me.drugs[me.RFID][numOfDrugCount].numOfDrugCount=0;
        me.drugs[me.RFID][numOfDrugCount].numOfDrugCount= numOfDrugCounts;

        processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].lastdestination =_lastdestination; 
        if(msg.sender ==  processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].lastdestination){
          
         numOfDrugCount=  me.numOfDrugCount;
         numOfDrugCount =numOfDrugCount++;
     me.drugs[me.RFID][numOfDrugCount].numOfDrugCount =  numOfDrugCount;
       return numOfDrugCount;
             
 }

}

function withdraw(uint balanceamount, uint escrowbalancenow) public payable  {
        
         address payable  escrowownaddresses=0xfd2C3e27BfACcf842424e48dC72cb18ba48E9457;
          uint  escrowbalanceiers=0;
          uint balanceleft =0;
           balanceleft =escrowbalancenow;
             escrowbalanceiers=escrowownaddresses.balance;
         
          procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
           i =procent.currentownerscount=0;
           strucount =processingstructures.currentpersoncount;
         
        
        
          procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= escrowownaddresses;
          
           
         processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
      processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= balanceamount;
      
    
        
        
        
         EscrowComplianceCecker.withdraw( processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount,escrowbalanceiers);
         
          }
     
     function balances() public view returns(uint){
          EscrowComplianceCecker.balances(); 
     }
     
     
  function claimPayment(address payable  yourcurrentowner, uint256 amount, uint256 nonce, bytes memory  signature, address payable receipientaddress,bytes32 hashes)
public payable {
    
    
    
     procent.currentownerscount=0;
          processingstructures.currentpersoncount=0;
         
       i =procent.currentownerscount;
       
     strucount =processingstructures.currentpersoncount;
    
  
      uint256 mynonce=0;
      mynonce =nonce;
    
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner=  yourcurrentowner;
      procent.processingentities[procent.RFIDofdrugtobesent][i].receiver =receipientaddress;
    
               processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount=0;
               processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount= amount;
    
    EscrowComplianceCecker.claimPayment( procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].escrowamount,mynonce, signature,   procent.processingentities[procent.RFIDofdrugtobesent][i].receiver,hashes);
    
}

 // Here is the place where we change ownership of the drug;
   function  changecurrentownership (bytes32 newName, bytes32 oldName,address payable  oldAddress, address payable newAddress,address payable _jushandedoveraddress,address payable manufactureraddress, bytes32 _RFID,  uint e,  bool haspackage, uint f, uint256 _currentownerprocessingfee)  public  {
  
 uint256 _nonce=0;
  bytes memory _signature;
   uint w=0;
   bytes32 hashes;
   
  
me.drugs;

procent.currentownerscount =0;
me.numOfDrugCount=0;
processingstructures.currentpersoncount=0;
//  procent.currentownerscount =e;
//    me.numOfDrugCount =   f;
 
  me.drugs[me.RFID][w].manufacturer =manufactureraddress;
    me.drugs[me.RFID][w].RFID = _RFID;
  
  w=me.numOfDrugCount;
  i =procent.currentownerscount;
 //  processingstructures.currentpersoncount =e;
     strucount =processingstructures.currentpersoncount;
    
     procent.processingentities[procent.RFIDofdrugtobesent][i].balance =0;
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount=0;
       me.drugs[me.RFID][w].numOfDrugCount=0;
        processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][i].escrowamount=0;
        procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerprocessingfee=0;

        procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerscount = e;
        me.drugs[me.RFID][w].numOfDrugCount =f;
   processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].hasdrug = haspackage;    
     
  processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].justhandedoveraddres =_jushandedoveraddress;
      //Here is where we check to see if the mesage sender is really the person
      //Here we have to add the drug, because the drug has to literally change hands;
  if (msg.sender !=  procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner &&processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].hasdrug==true) return;//This is optional
                                     processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].hasdrug=false;
                                      
      procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername = oldName;
       procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner= oldAddress;
        procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerprocessingfee = _currentownerprocessingfee;
          procent.processingentities[procent.RFIDofdrugtobesent][i].receivername= newName;
       procent.processingentities[procent.RFIDofdrugtobesent][i].receiver= newAddress;
       
       
      
      EscrowComplianceCecker.claimPayment( procent.processingentities[procent.RFIDofdrugtobesent][i].receiver, procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerprocessingfee,_nonce,_signature, procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,hashes);
                procent.processingentities[procent.RFIDofdrugtobesent][i].balance+= procent.processingentities[procent.RFIDofdrugtobesent][i].currentownerprocessingfee;
       EscrowComplianceCecker.returnbackescrow (  procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner,  procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername, processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][i].escrowamount);
       procent.processingentities[procent.RFIDofdrugtobesent][i].balance+=processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][i].escrowamount;
       
      // returnbackescrow (procent[i].currentowner,  procent[i].currentownername); 
     //LASTOWNER  WILL BE PAID HERE 
     
       
        procent.processingentities[procent.RFIDofdrugtobesent][i].currentownername=   procent.processingentities[procent.RFIDofdrugtobesent][i].receivername ;
        procent.processingentities[procent.RFIDofdrugtobesent][i].currentowner = procent.processingentities[procent.RFIDofdrugtobesent][i].receiver;
        processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].justhandedoveraddres = msg.sender;
        procent.processingentities[procent.RFIDofdrugtobesent][i].RFIDofdrugtobesent =   me.drugs[me.RFID][w].RFID ;
       processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].manufacturerofdrugstobesent = me.drugs[me.RFID][w].manufacturer;
         processingstructures.ProcessingEntityStructures[processingstructures.RFIDofthisdrug][strucount].hasdrug = true; 
       //This is optional
       
}


}
