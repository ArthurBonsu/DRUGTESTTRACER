var Industry = artifacts.require("Industry");
const assert = require("chai").assert;
 truffleAssert = require('truffle-assertions');
 

contract('Industry', (accounts) => { 
  var IndustryInstance;

 /* it("it displays the balance of the escrow", async () =>{
    return EscrowComplianceCecker.deployed().then(function(instance) {
      return instance.balances();
    })
  });*/

  it("it checks the processing phase", function() {
    return Industry.deployed().then(function(instance) {
        IndustryInstance = instance;
   //   let eventsendmyescrow = instance.pleasesendmyescrow();
      let amount =10;
    //  let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
      let processingnumber = web3.utils.toBN(amount);
       truffleAssert.reverts(
      
        IndustryInstance.newProcessingPhase(accounts[0], web3.utils.fromAscii("peeman"),accounts[1],web3.utils.fromAscii("michael"),web3.utils.fromAscii("0000xx"),processingnumber)).then(function(result){
      /*  instance.pleasesendmyescrow({
          filter: {},
          fromBlock: 0,
          toBlock: 'latest'
          }, function(error, event){ console.log(event); })
     let filter =     instance.pleasesendmyescrow({
            filter: {},
            fromBlock: 0,
            toBlock: 'latest'
            }, function(error, result){ console.log(result); })
*/

    });
 
     

  /*let eventss =   instance.allEvents({
      filter: {},
      fromBlock: 0,
      toBlock: 'latest'
      }, function(error, event){ console.log(event); })
     
    */ 
     
  
  
    });
   


 
  });

/*
  it("it checks to see amount sent", function() {

    return EscrowComplianceCecker.deployed().then(function(instance) {
     let event = instance.pleasesendmyescrow();
      EscrowInstance = instance;
      let amount =19;
      let amountrequiredo = web3.utils.toWei(amount.toString(),'ether');
      let amountsatisfied = web3.utils.toBN(amountrequiredo);
       truffleAssert.reverts(
      
       instance.Sent({from: accounts[0],to: instance.escrowownaddress(),value: amountsatisfied})).then(function(result){
          return amount;
       
        });
  
    
    });
 
  });


  */
  
 
 
  /* it("allows a voter to cast a vote", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      candidateId = 1;
      return electionInstance.vote(candidateId, { from: accounts[0] });
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, "an event was triggered");
      assert.equal(receipt.logs[0].event, "votedEvent", "the event type is correct");
      assert.equal(receipt.logs[0].args._candidateId.toNumber(), candidateId, "the candidate id is correct");
      return electionInstance.voters(accounts[0]);
    }).then(function(voted) {
      assert(voted, "the voter was marked as voted");
      return electionInstance.candidates(candidateId);
    }).then(function(candidate) {
      var voteCount = candidate[2];
      assert.equal(voteCount, 1, "increments the candidate's vote count");
    })
  });

  it("throws an exception for invalid candiates", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      return electionInstance.vote(99, { from: accounts[1] })
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, "error message must contain revert");
      return electionInstance.candidates(1);
    }).then(function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, "candidate 1 did not receive any votes");
      return electionInstance.candidates(2);
    }).then(function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 0, "candidate 2 did not receive any votes");
    });
  });

  it("throws an exception for double voting", function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      candidateId = 2;
      electionInstance.vote(candidateId, { from: accounts[1] });
      return electionInstance.candidates(candidateId);
    }).then(function(candidate) {
      var voteCount = candidate[2];
      assert.equal(voteCount, 1, "accepts first vote");
      // Try to vote again
      return electionInstance.vote(candidateId, { from: accounts[1] });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, "error message must contain revert");
      return electionInstance.candidates(1);
    }).then(function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, "candidate 1 did not receive any votes");
      return electionInstance.candidates(2);
    }).then(function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 1, "candidate 2 did not receive any votes");
    });
  });

*/


});

